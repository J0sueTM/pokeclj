version: '3.9'
name: pokeclj
services:
  # TODO: frontend app
  api:
    build:
      context: ./apisvc
    restart: no
    networks:
      - frontend
      - backend
    depends_on:
      - db
  db:
    build:
      context: ./db
      args:
        POSTGRES_USER: "${POSTGRES_USER}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_DB: "${POSTGRES_DB}"
        POSTGRES_DATA: "${POSTGRES_DATA}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_DATA: "${POSTGRES_DATA}"
      # something with postgres having different environment keys compared to
      # its docker image (a mess tbh), but it works.
      # https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-USER
      PGUSER: "${POSTGRES_USER}"
    restart: always
    volumes:
      - ${POSTGRES_DATA}:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
  migrate:
    image: migrate/migrate:latest
    profiles: ["tools"]
    volumes:
      - ./db/migrations:/migrations
    networks:
      - backend
    entrypoint: [
      "migrate",
      "-path",
      "/migrations",
      "-database",
      "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    ]
    command: ["up"]
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
